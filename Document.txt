
実行環境：Visual Studio Code
使用言語：Python
使用バージョン：3.9.7

main■.py(1~4)と設問■(1~4)にそれぞれ対応しています．これからそれぞれの内容の説明を記載します．出力結果は全て，TestResult.txtに記載します．
また全てのプログラムは，Visual Studio Codeの右上に配置されている実行ボタンを押下することで，実行可能です．

『main1.py』
設問1の回答です．まず今回調査するログが入ったlog1.txtを15，16行目で読み込み1行ごとにリスト化しました．その後行17，18行目での要素ごとにリスト化を行いました．これによってlog1.txtが多重配列として読み込むことができました．
19行目でタイムアウトが起きた箇所をリスト化し，21行目でタイムアウトが起きたものと同一のサーバーアドレスを持つものをまたリスト化しました．今回は，最初にタイムアウトしたときから、次にpingの応答が返るまでを故障期間とする．という指定があるので，例えば，タイムアウト，タイムアウト，pingが通るのようなことが同一のサーバーアドレスに起きていた場合，2個目のタイムアウトを適切に処理しないと余計な出力までされてしまうので22行目から31行目にこれらの処理を書いています．
これらの処理によってbreak_pointが更新されて，連続でタイムアウトが起きている箇所は初めから復旧後の差分のみを出力できるようになりました．その後durationという自作関数で経過時間を取得します．この関数はスライス機能でそれぞれに対応する数字を取得し，int型に変換し10，11行目で時間に変換し戻り値として経過時間を返すようになっています．

『main2.py』
設問2の回答です．設問1の機能を拡張しているので新たに機能追加したところの説明を記載します．
15行目で何回連続でタイムアウトを起こしていたら，故障とするかを変数として渡すようになっています．25行目でカウンター変数を用意し，連続でタイムアウトが起きている回数をカウントします．今回はNが3と定義しているので，タイムアウトが連続して2回以下しか起きていない場合は故障とみなさないとし，出力しないようになりました．

『main3.py』
設問3の回答です．今回も設問1の機能を拡張しているので新たに機能追加したところの説明を記載します．
15行目で直近いくつのデータの平均をとり，16行目でその平均値によって過負荷状態であるかどうかの判断をする変数を定義します．今回タイムアウトは故障とみなし，過負荷状態の判定には入れませんでした．そのため，タイムアウトが起きていない秒数のみで平均をとっています．
21行目以降でlog3.txtの1行ごとにデータを見ていき，24行目で今見ているデータと同一のサーバーアドレスを持つものを，リスト化しています．25行目では処理が進み直近のデータがm個より少なくなった時に，何もしないようになっています．
27行目で合計応答時間を保持する変数を定義し，直近(m-1)回(既にsumにはデータが入っている為)をmで除算し，その結果を30行目で変数として定義しています．avgがt以上であれば，過負荷状態にあるとして結果を出力し，超えていなければ何もしないようになっています．

『main4.py』
解き切ることができませんでした．時間が足りないということはなく，自分の考えをコードに起こす力が足りませんでした．